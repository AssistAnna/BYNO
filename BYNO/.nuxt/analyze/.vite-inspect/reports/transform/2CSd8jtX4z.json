{
  "resolvedId": "C:/Users/Anna/Documents/projets-web/BYNO/BYNO/node_modules/nuxt/dist/app/composables/payload.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { hasProtocol, joinURL, withoutTrailingSlash } from \"ufo\";\r\nimport { parse } from \"devalue\";\r\nimport { useHead } from \"@unhead/vue\";\r\nimport { getCurrentInstance } from \"vue\";\r\nimport { useNuxtApp, useRuntimeConfig } from \"../nuxt.js\";\r\nimport { useRoute } from \"./router.js\";\r\nimport { getAppManifest, getRouteRules } from \"./manifest.js\";\r\nimport { appManifest, payloadExtraction, renderJsonPayloads } from \"#build/nuxt.config.mjs\";\r\nexport function loadPayload(url, opts = {}) {\r\n  if (import.meta.server || !payloadExtraction) {\r\n    return null;\r\n  }\r\n  const payloadURL = _getPayloadURL(url, opts);\r\n  const nuxtApp = useNuxtApp();\r\n  const cache = nuxtApp._payloadCache = nuxtApp._payloadCache || {};\r\n  if (payloadURL in cache) {\r\n    return cache[payloadURL];\r\n  }\r\n  cache[payloadURL] = isPrerendered(url).then((prerendered) => {\r\n    if (!prerendered) {\r\n      cache[payloadURL] = null;\r\n      return null;\r\n    }\r\n    return _importPayload(payloadURL).then((payload) => {\r\n      if (payload) {\r\n        return payload;\r\n      }\r\n      delete cache[payloadURL];\r\n      return null;\r\n    });\r\n  });\r\n  return cache[payloadURL];\r\n}\r\nexport function preloadPayload(url, opts = {}) {\r\n  const payloadURL = _getPayloadURL(url, opts);\r\n  useHead({\r\n    link: [\r\n      { rel: \"modulepreload\", href: payloadURL }\r\n    ]\r\n  });\r\n}\r\nconst extension = renderJsonPayloads ? \"json\" : \"js\";\r\nfunction _getPayloadURL(url, opts = {}) {\r\n  const u = new URL(url, \"http://localhost\");\r\n  if (u.host !== \"localhost\" || hasProtocol(u.pathname, { acceptRelative: true })) {\r\n    throw new Error(\"Payload URL must not include hostname: \" + url);\r\n  }\r\n  const hash = opts.hash || (opts.fresh ? Date.now() : \"\");\r\n  return joinURL(useRuntimeConfig().app.baseURL, u.pathname, hash ? `_payload.${hash}.${extension}` : `_payload.${extension}`);\r\n}\r\nasync function _importPayload(payloadURL) {\r\n  if (import.meta.server || !payloadExtraction) {\r\n    return null;\r\n  }\r\n  const payloadPromise = renderJsonPayloads ? fetch(payloadURL).then((res) => res.text().then(parsePayload)) : import(\r\n    /* webpackIgnore: true */\r\n    /* @vite-ignore */\r\n    payloadURL\r\n  ).then((r) => r.default || r);\r\n  try {\r\n    return await payloadPromise;\r\n  } catch (err) {\r\n    console.warn(\"[nuxt] Cannot load payload \", payloadURL, err);\r\n  }\r\n  return null;\r\n}\r\nexport async function isPrerendered(url = useRoute().path) {\r\n  if (!appManifest) {\r\n    return !!useNuxtApp().payload.prerenderedAt;\r\n  }\r\n  url = withoutTrailingSlash(url);\r\n  const manifest = await getAppManifest();\r\n  if (manifest.prerendered.includes(url)) {\r\n    return true;\r\n  }\r\n  const rules = await getRouteRules(url);\r\n  return !!rules.prerender && !rules.redirect;\r\n}\r\nlet payloadCache = null;\r\nexport async function getNuxtClientPayload() {\r\n  if (import.meta.server) {\r\n    return;\r\n  }\r\n  if (payloadCache) {\r\n    return payloadCache;\r\n  }\r\n  const el = document.getElementById(\"__NUXT_DATA__\");\r\n  if (!el) {\r\n    return {};\r\n  }\r\n  const inlineData = await parsePayload(el.textContent || \"\");\r\n  const externalData = el.dataset.src ? await _importPayload(el.dataset.src) : void 0;\r\n  payloadCache = {\r\n    ...inlineData,\r\n    ...externalData,\r\n    ...window.__NUXT__\r\n  };\r\n  return payloadCache;\r\n}\r\nexport async function parsePayload(payload) {\r\n  return await parse(payload, useNuxtApp()._payloadRevivers);\r\n}\r\nexport function definePayloadReducer(name, reduce) {\r\n  if (import.meta.server) {\r\n    useNuxtApp().ssrContext._payloadReducers[name] = reduce;\r\n  }\r\n}\r\nexport function definePayloadReviver(name, revive) {\r\n  if (import.meta.dev && getCurrentInstance()) {\r\n    console.warn(\"[nuxt] [definePayloadReviver] This function must be called in a Nuxt plugin that is `unshift`ed to the beginning of the Nuxt plugins array.\");\r\n  }\r\n  if (import.meta.client) {\r\n    useNuxtApp()._payloadRevivers[name] = revive;\r\n  }\r\n}\r\n",
      "start": 1718568827625,
      "end": 1718568827781,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1718568827781,
      "end": 1718568827781,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1718568827781,
      "end": 1718568827781,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1718568827781,
      "end": 1718568827781,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1718568827781,
      "end": 1718568827781,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1718568827781,
      "end": 1718568827781,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1718568827781,
      "end": 1718568827781,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1718568827781,
      "end": 1718568827781,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1718568827781,
      "end": 1718568827781,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1718568827781,
      "end": 1718568827781,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1718568827781,
      "end": 1718568827781,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1718568827781,
      "end": 1718568827781,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1718568827781,
      "end": 1718568827781,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1718568827781,
      "end": 1718568827781,
      "order": "normal"
    },
    {
      "name": "replace",
      "result": "import { hasProtocol, joinURL, withoutTrailingSlash } from \"ufo\";\r\nimport { parse } from \"devalue\";\r\nimport { useHead } from \"@unhead/vue\";\r\nimport { getCurrentInstance } from \"vue\";\r\nimport { useNuxtApp, useRuntimeConfig } from \"../nuxt.js\";\r\nimport { useRoute } from \"./router.js\";\r\nimport { getAppManifest, getRouteRules } from \"./manifest.js\";\r\nimport { appManifest, payloadExtraction, renderJsonPayloads } from \"#build/nuxt.config.mjs\";\r\nexport function loadPayload(url, opts = {}) {\r\n  if (false || !payloadExtraction) {\r\n    return null;\r\n  }\r\n  const payloadURL = _getPayloadURL(url, opts);\r\n  const nuxtApp = useNuxtApp();\r\n  const cache = nuxtApp._payloadCache = nuxtApp._payloadCache || {};\r\n  if (payloadURL in cache) {\r\n    return cache[payloadURL];\r\n  }\r\n  cache[payloadURL] = isPrerendered(url).then((prerendered) => {\r\n    if (!prerendered) {\r\n      cache[payloadURL] = null;\r\n      return null;\r\n    }\r\n    return _importPayload(payloadURL).then((payload) => {\r\n      if (payload) {\r\n        return payload;\r\n      }\r\n      delete cache[payloadURL];\r\n      return null;\r\n    });\r\n  });\r\n  return cache[payloadURL];\r\n}\r\nexport function preloadPayload(url, opts = {}) {\r\n  const payloadURL = _getPayloadURL(url, opts);\r\n  useHead({\r\n    link: [\r\n      { rel: \"modulepreload\", href: payloadURL }\r\n    ]\r\n  });\r\n}\r\nconst extension = renderJsonPayloads ? \"json\" : \"js\";\r\nfunction _getPayloadURL(url, opts = {}) {\r\n  const u = new URL(url, \"http://localhost\");\r\n  if (u.host !== \"localhost\" || hasProtocol(u.pathname, { acceptRelative: true })) {\r\n    throw new Error(\"Payload URL must not include hostname: \" + url);\r\n  }\r\n  const hash = opts.hash || (opts.fresh ? Date.now() : \"\");\r\n  return joinURL(useRuntimeConfig().app.baseURL, u.pathname, hash ? `_payload.${hash}.${extension}` : `_payload.${extension}`);\r\n}\r\nasync function _importPayload(payloadURL) {\r\n  if (false || !payloadExtraction) {\r\n    return null;\r\n  }\r\n  const payloadPromise = renderJsonPayloads ? fetch(payloadURL).then((res) => res.text().then(parsePayload)) : import(\r\n    /* webpackIgnore: true */\r\n    /* @vite-ignore */\r\n    payloadURL\r\n  ).then((r) => r.default || r);\r\n  try {\r\n    return await payloadPromise;\r\n  } catch (err) {\r\n    console.warn(\"[nuxt] Cannot load payload \", payloadURL, err);\r\n  }\r\n  return null;\r\n}\r\nexport async function isPrerendered(url = useRoute().path) {\r\n  if (!appManifest) {\r\n    return !!useNuxtApp().payload.prerenderedAt;\r\n  }\r\n  url = withoutTrailingSlash(url);\r\n  const manifest = await getAppManifest();\r\n  if (manifest.prerendered.includes(url)) {\r\n    return true;\r\n  }\r\n  const rules = await getRouteRules(url);\r\n  return !!rules.prerender && !rules.redirect;\r\n}\r\nlet payloadCache = null;\r\nexport async function getNuxtClientPayload() {\r\n  if (false) {\r\n    return;\r\n  }\r\n  if (payloadCache) {\r\n    return payloadCache;\r\n  }\r\n  const el = document.getElementById(\"__NUXT_DATA__\");\r\n  if (!el) {\r\n    return {};\r\n  }\r\n  const inlineData = await parsePayload(el.textContent || \"\");\r\n  const externalData = el.dataset.src ? await _importPayload(el.dataset.src) : void 0;\r\n  payloadCache = {\r\n    ...inlineData,\r\n    ...externalData,\r\n    ...window.__NUXT__\r\n  };\r\n  return payloadCache;\r\n}\r\nexport async function parsePayload(payload) {\r\n  return await parse(payload, useNuxtApp()._payloadRevivers);\r\n}\r\nexport function definePayloadReducer(name, reduce) {\r\n  if (false) {\r\n    useNuxtApp().ssrContext._payloadReducers[name] = reduce;\r\n  }\r\n}\r\nexport function definePayloadReviver(name, revive) {\r\n  if (false && getCurrentInstance()) {\r\n    console.warn(\"[nuxt] [definePayloadReviver] This function must be called in a Nuxt plugin that is `unshift`ed to the beginning of the Nuxt plugins array.\");\r\n  }\r\n  if (true) {\r\n    useNuxtApp()._payloadRevivers[name] = revive;\r\n  }\r\n}\r\n",
      "start": 1718568827781,
      "end": 1718568827782,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvxkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtrF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACthI,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjvH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,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"
      }
    },
    {
      "name": "ssr-styles",
      "start": 1718568827782,
      "end": 1718568827782,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1718568827782,
      "end": 1718568827782,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1718568827782,
      "end": 1718568827782,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1718568827782,
      "end": 1718568827782,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1718568827782,
      "end": 1718568827782,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1718568827782,
      "end": 1718568827782,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1718568827782,
      "end": 1718568827782,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1718568827782,
      "end": 1718568827782,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1718568827782,
      "end": 1718568827782,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1718568827782,
      "end": 1718568827782,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1718568827782,
      "end": 1718568827782,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1718568827783,
      "end": 1718568827783,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1718568827783,
      "end": 1718568827783,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1718568827783,
      "end": 1718568827783,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1718568827783,
      "end": 1718568827783,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1718568827783,
      "end": 1718568827783,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1718568827783,
      "end": 1718568827783,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "result": "import { __vitePreload } from \"\u0000vite/preload-helper.js\";import { hasProtocol, joinURL, withoutTrailingSlash } from \"ufo\";\r\nimport { parse } from \"devalue\";\r\nimport { useHead } from \"@unhead/vue\";\r\nimport { getCurrentInstance } from \"vue\";\r\nimport { useNuxtApp, useRuntimeConfig } from \"../nuxt.js\";\r\nimport { useRoute } from \"./router.js\";\r\nimport { getAppManifest, getRouteRules } from \"./manifest.js\";\r\nimport { appManifest, payloadExtraction, renderJsonPayloads } from \"#build/nuxt.config.mjs\";\r\nexport function loadPayload(url, opts = {}) {\r\n  if (false || !payloadExtraction) {\r\n    return null;\r\n  }\r\n  const payloadURL = _getPayloadURL(url, opts);\r\n  const nuxtApp = useNuxtApp();\r\n  const cache = nuxtApp._payloadCache = nuxtApp._payloadCache || {};\r\n  if (payloadURL in cache) {\r\n    return cache[payloadURL];\r\n  }\r\n  cache[payloadURL] = isPrerendered(url).then((prerendered) => {\r\n    if (!prerendered) {\r\n      cache[payloadURL] = null;\r\n      return null;\r\n    }\r\n    return _importPayload(payloadURL).then((payload) => {\r\n      if (payload) {\r\n        return payload;\r\n      }\r\n      delete cache[payloadURL];\r\n      return null;\r\n    });\r\n  });\r\n  return cache[payloadURL];\r\n}\r\nexport function preloadPayload(url, opts = {}) {\r\n  const payloadURL = _getPayloadURL(url, opts);\r\n  useHead({\r\n    link: [\r\n      { rel: \"modulepreload\", href: payloadURL }\r\n    ]\r\n  });\r\n}\r\nconst extension = renderJsonPayloads ? \"json\" : \"js\";\r\nfunction _getPayloadURL(url, opts = {}) {\r\n  const u = new URL(url, \"http://localhost\");\r\n  if (u.host !== \"localhost\" || hasProtocol(u.pathname, { acceptRelative: true })) {\r\n    throw new Error(\"Payload URL must not include hostname: \" + url);\r\n  }\r\n  const hash = opts.hash || (opts.fresh ? Date.now() : \"\");\r\n  return joinURL(useRuntimeConfig().app.baseURL, u.pathname, hash ? `_payload.${hash}.${extension}` : `_payload.${extension}`);\r\n}\r\nasync function _importPayload(payloadURL) {\r\n  if (false || !payloadExtraction) {\r\n    return null;\r\n  }\r\n  const payloadPromise = renderJsonPayloads ? fetch(payloadURL).then((res) => res.text().then(parsePayload)) : __vitePreload(() => import(\r\n    /* webpackIgnore: true */\r\n    /* @vite-ignore */\r\n    payloadURL\r\n  ),__VITE_IS_MODERN__?\"__VITE_PRELOAD__\":void 0,import.meta.url).then((r) => r.default || r);\r\n  try {\r\n    return await payloadPromise;\r\n  } catch (err) {\r\n    console.warn(\"[nuxt] Cannot load payload \", payloadURL, err);\r\n  }\r\n  return null;\r\n}\r\nexport async function isPrerendered(url = useRoute().path) {\r\n  if (!appManifest) {\r\n    return !!useNuxtApp().payload.prerenderedAt;\r\n  }\r\n  url = withoutTrailingSlash(url);\r\n  const manifest = await getAppManifest();\r\n  if (manifest.prerendered.includes(url)) {\r\n    return true;\r\n  }\r\n  const rules = await getRouteRules(url);\r\n  return !!rules.prerender && !rules.redirect;\r\n}\r\nlet payloadCache = null;\r\nexport async function getNuxtClientPayload() {\r\n  if (false) {\r\n    return;\r\n  }\r\n  if (payloadCache) {\r\n    return payloadCache;\r\n  }\r\n  const el = document.getElementById(\"__NUXT_DATA__\");\r\n  if (!el) {\r\n    return {};\r\n  }\r\n  const inlineData = await parsePayload(el.textContent || \"\");\r\n  const externalData = el.dataset.src ? await _importPayload(el.dataset.src) : void 0;\r\n  payloadCache = {\r\n    ...inlineData,\r\n    ...externalData,\r\n    ...window.__NUXT__\r\n  };\r\n  return payloadCache;\r\n}\r\nexport async function parsePayload(payload) {\r\n  return await parse(payload, useNuxtApp()._payloadRevivers);\r\n}\r\nexport function definePayloadReducer(name, reduce) {\r\n  if (false) {\r\n    useNuxtApp().ssrContext._payloadReducers[name] = reduce;\r\n  }\r\n}\r\nexport function definePayloadReviver(name, revive) {\r\n  if (false && getCurrentInstance()) {\r\n    console.warn(\"[nuxt] [definePayloadReviver] This function must be called in a Nuxt plugin that is `unshift`ed to the beginning of the Nuxt plugins array.\");\r\n  }\r\n  if (true) {\r\n    useNuxtApp()._payloadRevivers[name] = revive;\r\n  }\r\n}\r\n",
      "start": 1718568827783,
      "end": 1718568827783,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:reporter",
      "start": 1718568827783,
      "end": 1718568827783,
      "order": "normal"
    }
  ]
}
